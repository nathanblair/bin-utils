#!/bin/bash

device=$(ls /sys/class/backlight)
function RunTest {
    before_brightness=$(cat /sys/class/backlight/$device/brightness)
    echo $before_brightness
    backlight $1
    echo $after_brightness
    after_brightness=$(cat /sys/class/backlight/$device/brightness)

    [[ ${1:0:1} == '+' || ${1:0:1} == '-' ]] && operator=${1:0:1} \
                                               || operator='='

    setting=${1%\%}
    check_brightness=$(( before_brightness $operator $setting ))
    [[ $after_brightness -ne $check_brightness ]] && return 1 || return 0
}

tests_failed=0
sleep_time=5s

echo Running ''backlight''
[[ $(RunTest) -ne 0 ]] && ((tests_failed++))

echo Running ''backlight %''
[[ $(RunTest %) -ne 0 ]] && ((tests_failed++))

#echo Running ''backlight 200''
#[[ $(RunTest 200) -ne 0 ]] && ((tests_failed++))

#echo Running ''backlight +50''
#[[ $(RunTest +50) -ne 0 ]] && ((tests_failed++))

# echo Running 'backlight' - should show current backlight value...
# echo $(backlight)
# [[ $? -ne 0 ]] && ((tests_failed++))
# sleep $sleep_time
# 
# n=50%
# echo Running ''backlight $n'' - should set backlight to $n
# echo $(backlight $n)
# # Replace with an assert
# [[ $? -ne 0 ]] && ((tests_failed++))
# echo $(backlight)
# sleep $sleep_time
# 
# n=+50%
# echo Running ''backlight $n'' - should increment backlight by $n
# echo $(backlight $n)
# # Replace with an assert
# [[ $? -ne 0 ]] && ((tests_failed++))
# echo $(backlight)
# sleep $sleep_time
# 
# n=-50%
# echo Running ''backlight $n'' - should decrement backlight by $n
# echo $(backlight $n)
# # Replace with an assert
# [[ $? -ne 0 ]] && ((tests_failed++))
# echo $(backlight)
# sleep $sleep_time

echo
echo Tests failed: $tests_failed
exit $tests_failed

